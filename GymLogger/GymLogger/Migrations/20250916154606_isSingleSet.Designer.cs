// <auto-generated />
using System;
using GymLogger.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GymLogger.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250916154606_isSingleSet")]
    partial class isSingleSet
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.8");

            modelBuilder.Entity("GymLogger.Exercise", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Exercises");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Bench Press"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Squat"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Deadlift"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Weighted Pull-ups"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Clean"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Bulgarian Split Squat"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Romanian Deadlift"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Biceps Curl"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Weighted Lunges"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Calf Raises"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Triceps Extension"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Leg Extensions"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Leg Raises"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Overhead Press"
                        },
                        new
                        {
                            Id = 15,
                            Name = "Rows"
                        },
                        new
                        {
                            Id = 16,
                            Name = "Shoulder Press"
                        },
                        new
                        {
                            Id = 17,
                            Name = "Hip Thrust"
                        },
                        new
                        {
                            Id = 18,
                            Name = "Kettlebell Swing"
                        });
                });

            modelBuilder.Entity("GymLogger.ExerciseMuscle", b =>
                {
                    b.Property<int>("ExerciseId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MuscleId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ExerciseId", "MuscleId");

                    b.HasIndex("MuscleId");

                    b.ToTable("ExerciseMuscles");

                    b.HasData(
                        new
                        {
                            ExerciseId = 1,
                            MuscleId = 5
                        },
                        new
                        {
                            ExerciseId = 1,
                            MuscleId = 7
                        },
                        new
                        {
                            ExerciseId = 1,
                            MuscleId = 9
                        },
                        new
                        {
                            ExerciseId = 2,
                            MuscleId = 2
                        },
                        new
                        {
                            ExerciseId = 2,
                            MuscleId = 1
                        },
                        new
                        {
                            ExerciseId = 2,
                            MuscleId = 3
                        },
                        new
                        {
                            ExerciseId = 2,
                            MuscleId = 13
                        },
                        new
                        {
                            ExerciseId = 3,
                            MuscleId = 1
                        },
                        new
                        {
                            ExerciseId = 3,
                            MuscleId = 3
                        },
                        new
                        {
                            ExerciseId = 3,
                            MuscleId = 6
                        },
                        new
                        {
                            ExerciseId = 3,
                            MuscleId = 10
                        },
                        new
                        {
                            ExerciseId = 3,
                            MuscleId = 12
                        },
                        new
                        {
                            ExerciseId = 3,
                            MuscleId = 11
                        },
                        new
                        {
                            ExerciseId = 4,
                            MuscleId = 6
                        },
                        new
                        {
                            ExerciseId = 4,
                            MuscleId = 10
                        },
                        new
                        {
                            ExerciseId = 5,
                            MuscleId = 2
                        },
                        new
                        {
                            ExerciseId = 5,
                            MuscleId = 1
                        },
                        new
                        {
                            ExerciseId = 5,
                            MuscleId = 3
                        },
                        new
                        {
                            ExerciseId = 5,
                            MuscleId = 7
                        },
                        new
                        {
                            ExerciseId = 5,
                            MuscleId = 12
                        },
                        new
                        {
                            ExerciseId = 5,
                            MuscleId = 11
                        },
                        new
                        {
                            ExerciseId = 6,
                            MuscleId = 2
                        },
                        new
                        {
                            ExerciseId = 6,
                            MuscleId = 1
                        },
                        new
                        {
                            ExerciseId = 6,
                            MuscleId = 3
                        },
                        new
                        {
                            ExerciseId = 7,
                            MuscleId = 1
                        },
                        new
                        {
                            ExerciseId = 7,
                            MuscleId = 3
                        },
                        new
                        {
                            ExerciseId = 7,
                            MuscleId = 6
                        },
                        new
                        {
                            ExerciseId = 8,
                            MuscleId = 8
                        },
                        new
                        {
                            ExerciseId = 8,
                            MuscleId = 10
                        },
                        new
                        {
                            ExerciseId = 9,
                            MuscleId = 2
                        },
                        new
                        {
                            ExerciseId = 9,
                            MuscleId = 1
                        },
                        new
                        {
                            ExerciseId = 9,
                            MuscleId = 3
                        },
                        new
                        {
                            ExerciseId = 10,
                            MuscleId = 4
                        },
                        new
                        {
                            ExerciseId = 11,
                            MuscleId = 9
                        },
                        new
                        {
                            ExerciseId = 12,
                            MuscleId = 2
                        },
                        new
                        {
                            ExerciseId = 13,
                            MuscleId = 11
                        },
                        new
                        {
                            ExerciseId = 13,
                            MuscleId = 3
                        },
                        new
                        {
                            ExerciseId = 14,
                            MuscleId = 7
                        },
                        new
                        {
                            ExerciseId = 14,
                            MuscleId = 12
                        },
                        new
                        {
                            ExerciseId = 15,
                            MuscleId = 6
                        },
                        new
                        {
                            ExerciseId = 15,
                            MuscleId = 10
                        },
                        new
                        {
                            ExerciseId = 15,
                            MuscleId = 12
                        },
                        new
                        {
                            ExerciseId = 16,
                            MuscleId = 7
                        },
                        new
                        {
                            ExerciseId = 16,
                            MuscleId = 12
                        },
                        new
                        {
                            ExerciseId = 17,
                            MuscleId = 3
                        },
                        new
                        {
                            ExerciseId = 17,
                            MuscleId = 1
                        },
                        new
                        {
                            ExerciseId = 17,
                            MuscleId = 11
                        },
                        new
                        {
                            ExerciseId = 18,
                            MuscleId = 1
                        },
                        new
                        {
                            ExerciseId = 18,
                            MuscleId = 3
                        },
                        new
                        {
                            ExerciseId = 18,
                            MuscleId = 11
                        });
                });

            modelBuilder.Entity("GymLogger.ExerciseSession", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("ExerciseId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("NofRepetitions")
                        .HasColumnType("INTEGER");

                    b.Property<int>("NofSets")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Note")
                        .HasColumnType("TEXT");

                    b.Property<int>("SessionId")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Weight")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("ExerciseId");

                    b.HasIndex("SessionId");

                    b.ToTable("ExerciseSessions");
                });

            modelBuilder.Entity("GymLogger.Muscle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Importance")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Muscles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Importance = 4,
                            Name = "Hamstrings"
                        },
                        new
                        {
                            Id = 2,
                            Importance = 5,
                            Name = "Quadriceps"
                        },
                        new
                        {
                            Id = 3,
                            Importance = 5,
                            Name = "Glutes"
                        },
                        new
                        {
                            Id = 4,
                            Importance = 2,
                            Name = "Calves"
                        },
                        new
                        {
                            Id = 5,
                            Importance = 5,
                            Name = "Chest"
                        },
                        new
                        {
                            Id = 6,
                            Importance = 5,
                            Name = "Back"
                        },
                        new
                        {
                            Id = 7,
                            Importance = 4,
                            Name = "Shoulders"
                        },
                        new
                        {
                            Id = 8,
                            Importance = 3,
                            Name = "Biceps"
                        },
                        new
                        {
                            Id = 9,
                            Importance = 3,
                            Name = "Triceps"
                        },
                        new
                        {
                            Id = 10,
                            Importance = 1,
                            Name = "Forearms"
                        },
                        new
                        {
                            Id = 11,
                            Importance = 3,
                            Name = "Core"
                        },
                        new
                        {
                            Id = 12,
                            Importance = 2,
                            Name = "Trapezius"
                        },
                        new
                        {
                            Id = 13,
                            Importance = 1,
                            Name = "Adductors"
                        });
                });

            modelBuilder.Entity("GymLogger.Session", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<int>("Feeling")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Sessions");
                });

            modelBuilder.Entity("GymLogger.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<DateOnly?>("BirthDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int?>("Height")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<int?>("Weight")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("GymLogger.ExerciseMuscle", b =>
                {
                    b.HasOne("GymLogger.Exercise", "Exercise")
                        .WithMany("ExerciseMuscles")
                        .HasForeignKey("ExerciseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GymLogger.Muscle", "Muscle")
                        .WithMany("ExerciseMuscles")
                        .HasForeignKey("MuscleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exercise");

                    b.Navigation("Muscle");
                });

            modelBuilder.Entity("GymLogger.ExerciseSession", b =>
                {
                    b.HasOne("GymLogger.Exercise", "Exercise")
                        .WithMany()
                        .HasForeignKey("ExerciseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GymLogger.Session", "Session")
                        .WithMany("ExerciseSessions")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exercise");

                    b.Navigation("Session");
                });

            modelBuilder.Entity("GymLogger.Session", b =>
                {
                    b.HasOne("GymLogger.User", "User")
                        .WithMany("Sessions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("GymLogger.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("GymLogger.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GymLogger.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("GymLogger.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GymLogger.Exercise", b =>
                {
                    b.Navigation("ExerciseMuscles");
                });

            modelBuilder.Entity("GymLogger.Muscle", b =>
                {
                    b.Navigation("ExerciseMuscles");
                });

            modelBuilder.Entity("GymLogger.Session", b =>
                {
                    b.Navigation("ExerciseSessions");
                });

            modelBuilder.Entity("GymLogger.User", b =>
                {
                    b.Navigation("Sessions");
                });
#pragma warning restore 612, 618
        }
    }
}
